/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.ebay.rheos.schema.event;  
@SuppressWarnings("all")
/** This is the common avro schema that every message stored in shared data stream must comply. */
@org.apache.avro.specific.AvroGenerated
public class BaseEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BaseEvent\",\"namespace\":\"io.ebay.rheos.schema.event\",\"doc\":\"This is the common avro schema that every message stored in shared data stream must comply.\",\"fields\":[{\"name\":\"rheosHeader\",\"type\":{\"type\":\"record\",\"name\":\"RheosHeader\",\"fields\":[{\"name\":\"eventCreateTimestamp\",\"type\":\"long\",\"doc\":\"Event creation time. This is the time the event is created.\"},{\"name\":\"eventSentTimestamp\",\"type\":\"long\",\"doc\":\"Event sent time. This is the time the event is sent out to Kafka. It is not necessary equal to eventCreateTimestamp.\"},{\"name\":\"schemaId\",\"type\":\"int\"},{\"name\":\"eventId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"producerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"doc\":\"Rheos header\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Rheos header */
  @Deprecated public io.ebay.rheos.schema.event.RheosHeader rheosHeader;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BaseEvent() {}

  /**
   * All-args constructor.
   */
  public BaseEvent(io.ebay.rheos.schema.event.RheosHeader rheosHeader) {
    this.rheosHeader = rheosHeader;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rheosHeader;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rheosHeader = (io.ebay.rheos.schema.event.RheosHeader)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rheosHeader' field.
   * Rheos header   */
  public io.ebay.rheos.schema.event.RheosHeader getRheosHeader() {
    return rheosHeader;
  }

  /**
   * Sets the value of the 'rheosHeader' field.
   * Rheos header   * @param value the value to set.
   */
  public void setRheosHeader(io.ebay.rheos.schema.event.RheosHeader value) {
    this.rheosHeader = value;
  }

  /** Creates a new BaseEvent RecordBuilder */
  public static io.ebay.rheos.schema.event.BaseEvent.Builder newBuilder() {
    return new io.ebay.rheos.schema.event.BaseEvent.Builder();
  }
  
  /** Creates a new BaseEvent RecordBuilder by copying an existing Builder */
  public static io.ebay.rheos.schema.event.BaseEvent.Builder newBuilder(io.ebay.rheos.schema.event.BaseEvent.Builder other) {
    return new io.ebay.rheos.schema.event.BaseEvent.Builder(other);
  }
  
  /** Creates a new BaseEvent RecordBuilder by copying an existing BaseEvent instance */
  public static io.ebay.rheos.schema.event.BaseEvent.Builder newBuilder(io.ebay.rheos.schema.event.BaseEvent other) {
    return new io.ebay.rheos.schema.event.BaseEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for BaseEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BaseEvent>
    implements org.apache.avro.data.RecordBuilder<BaseEvent> {

    private io.ebay.rheos.schema.event.RheosHeader rheosHeader;

    /** Creates a new Builder */
    private Builder() {
      super(io.ebay.rheos.schema.event.BaseEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.ebay.rheos.schema.event.BaseEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rheosHeader)) {
        this.rheosHeader = data().deepCopy(fields()[0].schema(), other.rheosHeader);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BaseEvent instance */
    private Builder(io.ebay.rheos.schema.event.BaseEvent other) {
            super(io.ebay.rheos.schema.event.BaseEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.rheosHeader)) {
        this.rheosHeader = data().deepCopy(fields()[0].schema(), other.rheosHeader);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'rheosHeader' field */
    public io.ebay.rheos.schema.event.RheosHeader getRheosHeader() {
      return rheosHeader;
    }
    
    /** Sets the value of the 'rheosHeader' field */
    public io.ebay.rheos.schema.event.BaseEvent.Builder setRheosHeader(io.ebay.rheos.schema.event.RheosHeader value) {
      validate(fields()[0], value);
      this.rheosHeader = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'rheosHeader' field has been set */
    public boolean hasRheosHeader() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'rheosHeader' field */
    public io.ebay.rheos.schema.event.BaseEvent.Builder clearRheosHeader() {
      rheosHeader = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public BaseEvent build() {
      try {
        BaseEvent record = new BaseEvent();
        record.rheosHeader = fieldSetFlags()[0] ? this.rheosHeader : (io.ebay.rheos.schema.event.RheosHeader) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
