/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ebay.sojourner.common.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SessionMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2472865082437120016L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SessionMetrics\",\"namespace\":\"com.ebay.sojourner.common.model\",\"fields\":[{\"name\":\"rheosHeader\",\"type\":{\"type\":\"record\",\"name\":\"RheosHeader\",\"fields\":[{\"name\":\"eventCreateTimestamp\",\"type\":\"long\"},{\"name\":\"eventSentTimestamp\",\"type\":\"long\"},{\"name\":\"schemaId\",\"type\":\"int\"},{\"name\":\"eventId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"producerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"doc\":\"Rheos header\"},{\"name\":\"guid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"from ubisession guid\"},{\"name\":\"sessionSkey\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession sessionSkey\"},{\"name\":\"sessionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"from ubisession sessionId\"},{\"name\":\"sojDataDt\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession sojDataDt\"},{\"name\":\"sessionStartDt\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession sessionStartDt\"},{\"name\":\"sessionEndDt\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession sessionEndDt\"},{\"name\":\"absStartTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession absStartTimestamp\"},{\"name\":\"absEndTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"from ubisession absEndTimestamp\"},{\"name\":\"botFlagList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"default\":null},{\"name\":\"isOpen\",\"type\":[\"null\",\"boolean\"],\"doc\":\"to identify open or end\"},{\"name\":\"metrics\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"}],\"doc\":\"Session metrics data map\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SessionMetrics> ENCODER =
      new BinaryMessageEncoder<SessionMetrics>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SessionMetrics> DECODER =
      new BinaryMessageDecoder<SessionMetrics>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SessionMetrics> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SessionMetrics> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SessionMetrics>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SessionMetrics to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SessionMetrics from a ByteBuffer. */
  public static SessionMetrics fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Rheos header */
  @Deprecated public com.ebay.sojourner.common.model.RheosHeader rheosHeader;
  /** from ubisession guid */
  @Deprecated public java.lang.String guid;
  /** from ubisession sessionSkey */
  @Deprecated public java.lang.Long sessionSkey;
  /** from ubisession sessionId */
  @Deprecated public java.lang.String sessionId;
  /** from ubisession sojDataDt */
  @Deprecated public java.lang.Long sojDataDt;
  /** from ubisession sessionStartDt */
  @Deprecated public java.lang.Long sessionStartDt;
  /** from ubisession sessionEndDt */
  @Deprecated public java.lang.Long sessionEndDt;
  /** from ubisession absStartTimestamp */
  @Deprecated public java.lang.Long absStartTimestamp;
  /** from ubisession absEndTimestamp */
  @Deprecated public java.lang.Long absEndTimestamp;
  @Deprecated public java.util.List<java.lang.Integer> botFlagList;
  /** to identify open or end */
  @Deprecated public java.lang.Boolean isOpen;
  /** Session metrics data map */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> metrics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SessionMetrics() {}

  /**
   * All-args constructor.
   * @param rheosHeader Rheos header
   * @param guid from ubisession guid
   * @param sessionSkey from ubisession sessionSkey
   * @param sessionId from ubisession sessionId
   * @param sojDataDt from ubisession sojDataDt
   * @param sessionStartDt from ubisession sessionStartDt
   * @param sessionEndDt from ubisession sessionEndDt
   * @param absStartTimestamp from ubisession absStartTimestamp
   * @param absEndTimestamp from ubisession absEndTimestamp
   * @param botFlagList The new value for botFlagList
   * @param isOpen to identify open or end
   * @param metrics Session metrics data map
   */
  public SessionMetrics(com.ebay.sojourner.common.model.RheosHeader rheosHeader, java.lang.String guid, java.lang.Long sessionSkey, java.lang.String sessionId, java.lang.Long sojDataDt, java.lang.Long sessionStartDt, java.lang.Long sessionEndDt, java.lang.Long absStartTimestamp, java.lang.Long absEndTimestamp, java.util.List<java.lang.Integer> botFlagList, java.lang.Boolean isOpen, java.util.Map<java.lang.String,java.lang.String> metrics) {
    this.rheosHeader = rheosHeader;
    this.guid = guid;
    this.sessionSkey = sessionSkey;
    this.sessionId = sessionId;
    this.sojDataDt = sojDataDt;
    this.sessionStartDt = sessionStartDt;
    this.sessionEndDt = sessionEndDt;
    this.absStartTimestamp = absStartTimestamp;
    this.absEndTimestamp = absEndTimestamp;
    this.botFlagList = botFlagList;
    this.isOpen = isOpen;
    this.metrics = metrics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rheosHeader;
    case 1: return guid;
    case 2: return sessionSkey;
    case 3: return sessionId;
    case 4: return sojDataDt;
    case 5: return sessionStartDt;
    case 6: return sessionEndDt;
    case 7: return absStartTimestamp;
    case 8: return absEndTimestamp;
    case 9: return botFlagList;
    case 10: return isOpen;
    case 11: return metrics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rheosHeader = (com.ebay.sojourner.common.model.RheosHeader)value$; break;
    case 1: guid = (java.lang.String)value$; break;
    case 2: sessionSkey = (java.lang.Long)value$; break;
    case 3: sessionId = (java.lang.String)value$; break;
    case 4: sojDataDt = (java.lang.Long)value$; break;
    case 5: sessionStartDt = (java.lang.Long)value$; break;
    case 6: sessionEndDt = (java.lang.Long)value$; break;
    case 7: absStartTimestamp = (java.lang.Long)value$; break;
    case 8: absEndTimestamp = (java.lang.Long)value$; break;
    case 9: botFlagList = (java.util.List<java.lang.Integer>)value$; break;
    case 10: isOpen = (java.lang.Boolean)value$; break;
    case 11: metrics = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rheosHeader' field.
   * @return Rheos header
   */
  public com.ebay.sojourner.common.model.RheosHeader getRheosHeader() {
    return rheosHeader;
  }

  /**
   * Sets the value of the 'rheosHeader' field.
   * Rheos header
   * @param value the value to set.
   */
  public void setRheosHeader(com.ebay.sojourner.common.model.RheosHeader value) {
    this.rheosHeader = value;
  }

  /**
   * Gets the value of the 'guid' field.
   * @return from ubisession guid
   */
  public java.lang.String getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * from ubisession guid
   * @param value the value to set.
   */
  public void setGuid(java.lang.String value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'sessionSkey' field.
   * @return from ubisession sessionSkey
   */
  public java.lang.Long getSessionSkey() {
    return sessionSkey;
  }

  /**
   * Sets the value of the 'sessionSkey' field.
   * from ubisession sessionSkey
   * @param value the value to set.
   */
  public void setSessionSkey(java.lang.Long value) {
    this.sessionSkey = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return from ubisession sessionId
   */
  public java.lang.String getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * from ubisession sessionId
   * @param value the value to set.
   */
  public void setSessionId(java.lang.String value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'sojDataDt' field.
   * @return from ubisession sojDataDt
   */
  public java.lang.Long getSojDataDt() {
    return sojDataDt;
  }

  /**
   * Sets the value of the 'sojDataDt' field.
   * from ubisession sojDataDt
   * @param value the value to set.
   */
  public void setSojDataDt(java.lang.Long value) {
    this.sojDataDt = value;
  }

  /**
   * Gets the value of the 'sessionStartDt' field.
   * @return from ubisession sessionStartDt
   */
  public java.lang.Long getSessionStartDt() {
    return sessionStartDt;
  }

  /**
   * Sets the value of the 'sessionStartDt' field.
   * from ubisession sessionStartDt
   * @param value the value to set.
   */
  public void setSessionStartDt(java.lang.Long value) {
    this.sessionStartDt = value;
  }

  /**
   * Gets the value of the 'sessionEndDt' field.
   * @return from ubisession sessionEndDt
   */
  public java.lang.Long getSessionEndDt() {
    return sessionEndDt;
  }

  /**
   * Sets the value of the 'sessionEndDt' field.
   * from ubisession sessionEndDt
   * @param value the value to set.
   */
  public void setSessionEndDt(java.lang.Long value) {
    this.sessionEndDt = value;
  }

  /**
   * Gets the value of the 'absStartTimestamp' field.
   * @return from ubisession absStartTimestamp
   */
  public java.lang.Long getAbsStartTimestamp() {
    return absStartTimestamp;
  }

  /**
   * Sets the value of the 'absStartTimestamp' field.
   * from ubisession absStartTimestamp
   * @param value the value to set.
   */
  public void setAbsStartTimestamp(java.lang.Long value) {
    this.absStartTimestamp = value;
  }

  /**
   * Gets the value of the 'absEndTimestamp' field.
   * @return from ubisession absEndTimestamp
   */
  public java.lang.Long getAbsEndTimestamp() {
    return absEndTimestamp;
  }

  /**
   * Sets the value of the 'absEndTimestamp' field.
   * from ubisession absEndTimestamp
   * @param value the value to set.
   */
  public void setAbsEndTimestamp(java.lang.Long value) {
    this.absEndTimestamp = value;
  }

  /**
   * Gets the value of the 'botFlagList' field.
   * @return The value of the 'botFlagList' field.
   */
  public java.util.List<java.lang.Integer> getBotFlagList() {
    return botFlagList;
  }

  /**
   * Sets the value of the 'botFlagList' field.
   * @param value the value to set.
   */
  public void setBotFlagList(java.util.List<java.lang.Integer> value) {
    this.botFlagList = value;
  }

  /**
   * Gets the value of the 'isOpen' field.
   * @return to identify open or end
   */
  public java.lang.Boolean getIsOpen() {
    return isOpen;
  }

  /**
   * Sets the value of the 'isOpen' field.
   * to identify open or end
   * @param value the value to set.
   */
  public void setIsOpen(java.lang.Boolean value) {
    this.isOpen = value;
  }

  /**
   * Gets the value of the 'metrics' field.
   * @return Session metrics data map
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetrics() {
    return metrics;
  }

  /**
   * Sets the value of the 'metrics' field.
   * Session metrics data map
   * @param value the value to set.
   */
  public void setMetrics(java.util.Map<java.lang.String,java.lang.String> value) {
    this.metrics = value;
  }

  /**
   * Creates a new SessionMetrics RecordBuilder.
   * @return A new SessionMetrics RecordBuilder
   */
  public static com.ebay.sojourner.common.model.SessionMetrics.Builder newBuilder() {
    return new com.ebay.sojourner.common.model.SessionMetrics.Builder();
  }

  /**
   * Creates a new SessionMetrics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SessionMetrics RecordBuilder
   */
  public static com.ebay.sojourner.common.model.SessionMetrics.Builder newBuilder(com.ebay.sojourner.common.model.SessionMetrics.Builder other) {
    return new com.ebay.sojourner.common.model.SessionMetrics.Builder(other);
  }

  /**
   * Creates a new SessionMetrics RecordBuilder by copying an existing SessionMetrics instance.
   * @param other The existing instance to copy.
   * @return A new SessionMetrics RecordBuilder
   */
  public static com.ebay.sojourner.common.model.SessionMetrics.Builder newBuilder(com.ebay.sojourner.common.model.SessionMetrics other) {
    return new com.ebay.sojourner.common.model.SessionMetrics.Builder(other);
  }

  /**
   * RecordBuilder for SessionMetrics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SessionMetrics>
    implements org.apache.avro.data.RecordBuilder<SessionMetrics> {

    /** Rheos header */
    private com.ebay.sojourner.common.model.RheosHeader rheosHeader;
    private com.ebay.sojourner.common.model.RheosHeader.Builder rheosHeaderBuilder;
    /** from ubisession guid */
    private java.lang.String guid;
    /** from ubisession sessionSkey */
    private java.lang.Long sessionSkey;
    /** from ubisession sessionId */
    private java.lang.String sessionId;
    /** from ubisession sojDataDt */
    private java.lang.Long sojDataDt;
    /** from ubisession sessionStartDt */
    private java.lang.Long sessionStartDt;
    /** from ubisession sessionEndDt */
    private java.lang.Long sessionEndDt;
    /** from ubisession absStartTimestamp */
    private java.lang.Long absStartTimestamp;
    /** from ubisession absEndTimestamp */
    private java.lang.Long absEndTimestamp;
    private java.util.List<java.lang.Integer> botFlagList;
    /** to identify open or end */
    private java.lang.Boolean isOpen;
    /** Session metrics data map */
    private java.util.Map<java.lang.String,java.lang.String> metrics;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ebay.sojourner.common.model.SessionMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rheosHeader)) {
        this.rheosHeader = data().deepCopy(fields()[0].schema(), other.rheosHeader);
        fieldSetFlags()[0] = true;
      }
      if (other.hasRheosHeaderBuilder()) {
        this.rheosHeaderBuilder = com.ebay.sojourner.common.model.RheosHeader.newBuilder(other.getRheosHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.guid)) {
        this.guid = data().deepCopy(fields()[1].schema(), other.guid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sessionSkey)) {
        this.sessionSkey = data().deepCopy(fields()[2].schema(), other.sessionSkey);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[3].schema(), other.sessionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sojDataDt)) {
        this.sojDataDt = data().deepCopy(fields()[4].schema(), other.sojDataDt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionStartDt)) {
        this.sessionStartDt = data().deepCopy(fields()[5].schema(), other.sessionStartDt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sessionEndDt)) {
        this.sessionEndDt = data().deepCopy(fields()[6].schema(), other.sessionEndDt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.absStartTimestamp)) {
        this.absStartTimestamp = data().deepCopy(fields()[7].schema(), other.absStartTimestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.absEndTimestamp)) {
        this.absEndTimestamp = data().deepCopy(fields()[8].schema(), other.absEndTimestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.botFlagList)) {
        this.botFlagList = data().deepCopy(fields()[9].schema(), other.botFlagList);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isOpen)) {
        this.isOpen = data().deepCopy(fields()[10].schema(), other.isOpen);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.metrics)) {
        this.metrics = data().deepCopy(fields()[11].schema(), other.metrics);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SessionMetrics instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ebay.sojourner.common.model.SessionMetrics other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.rheosHeader)) {
        this.rheosHeader = data().deepCopy(fields()[0].schema(), other.rheosHeader);
        fieldSetFlags()[0] = true;
      }
      this.rheosHeaderBuilder = null;
      if (isValidValue(fields()[1], other.guid)) {
        this.guid = data().deepCopy(fields()[1].schema(), other.guid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sessionSkey)) {
        this.sessionSkey = data().deepCopy(fields()[2].schema(), other.sessionSkey);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[3].schema(), other.sessionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sojDataDt)) {
        this.sojDataDt = data().deepCopy(fields()[4].schema(), other.sojDataDt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionStartDt)) {
        this.sessionStartDt = data().deepCopy(fields()[5].schema(), other.sessionStartDt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sessionEndDt)) {
        this.sessionEndDt = data().deepCopy(fields()[6].schema(), other.sessionEndDt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.absStartTimestamp)) {
        this.absStartTimestamp = data().deepCopy(fields()[7].schema(), other.absStartTimestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.absEndTimestamp)) {
        this.absEndTimestamp = data().deepCopy(fields()[8].schema(), other.absEndTimestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.botFlagList)) {
        this.botFlagList = data().deepCopy(fields()[9].schema(), other.botFlagList);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isOpen)) {
        this.isOpen = data().deepCopy(fields()[10].schema(), other.isOpen);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.metrics)) {
        this.metrics = data().deepCopy(fields()[11].schema(), other.metrics);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'rheosHeader' field.
      * Rheos header
      * @return The value.
      */
    public com.ebay.sojourner.common.model.RheosHeader getRheosHeader() {
      return rheosHeader;
    }

    /**
      * Sets the value of the 'rheosHeader' field.
      * Rheos header
      * @param value The value of 'rheosHeader'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setRheosHeader(com.ebay.sojourner.common.model.RheosHeader value) {
      validate(fields()[0], value);
      this.rheosHeaderBuilder = null;
      this.rheosHeader = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'rheosHeader' field has been set.
      * Rheos header
      * @return True if the 'rheosHeader' field has been set, false otherwise.
      */
    public boolean hasRheosHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'rheosHeader' field and creates one if it doesn't exist yet.
     * Rheos header
     * @return This builder.
     */
    public com.ebay.sojourner.common.model.RheosHeader.Builder getRheosHeaderBuilder() {
      if (rheosHeaderBuilder == null) {
        if (hasRheosHeader()) {
          setRheosHeaderBuilder(com.ebay.sojourner.common.model.RheosHeader.newBuilder(rheosHeader));
        } else {
          setRheosHeaderBuilder(com.ebay.sojourner.common.model.RheosHeader.newBuilder());
        }
      }
      return rheosHeaderBuilder;
    }

    /**
     * Sets the Builder instance for the 'rheosHeader' field
     * Rheos header
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setRheosHeaderBuilder(com.ebay.sojourner.common.model.RheosHeader.Builder value) {
      clearRheosHeader();
      rheosHeaderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rheosHeader' field has an active Builder instance
     * Rheos header
     * @return True if the 'rheosHeader' field has an active Builder instance
     */
    public boolean hasRheosHeaderBuilder() {
      return rheosHeaderBuilder != null;
    }

    /**
      * Clears the value of the 'rheosHeader' field.
      * Rheos header
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearRheosHeader() {
      rheosHeader = null;
      rheosHeaderBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'guid' field.
      * from ubisession guid
      * @return The value.
      */
    public java.lang.String getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * from ubisession guid
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setGuid(java.lang.String value) {
      validate(fields()[1], value);
      this.guid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * from ubisession guid
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'guid' field.
      * from ubisession guid
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionSkey' field.
      * from ubisession sessionSkey
      * @return The value.
      */
    public java.lang.Long getSessionSkey() {
      return sessionSkey;
    }

    /**
      * Sets the value of the 'sessionSkey' field.
      * from ubisession sessionSkey
      * @param value The value of 'sessionSkey'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setSessionSkey(java.lang.Long value) {
      validate(fields()[2], value);
      this.sessionSkey = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionSkey' field has been set.
      * from ubisession sessionSkey
      * @return True if the 'sessionSkey' field has been set, false otherwise.
      */
    public boolean hasSessionSkey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sessionSkey' field.
      * from ubisession sessionSkey
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearSessionSkey() {
      sessionSkey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * from ubisession sessionId
      * @return The value.
      */
    public java.lang.String getSessionId() {
      return sessionId;
    }

    /**
      * Sets the value of the 'sessionId' field.
      * from ubisession sessionId
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setSessionId(java.lang.String value) {
      validate(fields()[3], value);
      this.sessionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * from ubisession sessionId
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * from ubisession sessionId
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sojDataDt' field.
      * from ubisession sojDataDt
      * @return The value.
      */
    public java.lang.Long getSojDataDt() {
      return sojDataDt;
    }

    /**
      * Sets the value of the 'sojDataDt' field.
      * from ubisession sojDataDt
      * @param value The value of 'sojDataDt'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setSojDataDt(java.lang.Long value) {
      validate(fields()[4], value);
      this.sojDataDt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sojDataDt' field has been set.
      * from ubisession sojDataDt
      * @return True if the 'sojDataDt' field has been set, false otherwise.
      */
    public boolean hasSojDataDt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sojDataDt' field.
      * from ubisession sojDataDt
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearSojDataDt() {
      sojDataDt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionStartDt' field.
      * from ubisession sessionStartDt
      * @return The value.
      */
    public java.lang.Long getSessionStartDt() {
      return sessionStartDt;
    }

    /**
      * Sets the value of the 'sessionStartDt' field.
      * from ubisession sessionStartDt
      * @param value The value of 'sessionStartDt'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setSessionStartDt(java.lang.Long value) {
      validate(fields()[5], value);
      this.sessionStartDt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionStartDt' field has been set.
      * from ubisession sessionStartDt
      * @return True if the 'sessionStartDt' field has been set, false otherwise.
      */
    public boolean hasSessionStartDt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sessionStartDt' field.
      * from ubisession sessionStartDt
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearSessionStartDt() {
      sessionStartDt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionEndDt' field.
      * from ubisession sessionEndDt
      * @return The value.
      */
    public java.lang.Long getSessionEndDt() {
      return sessionEndDt;
    }

    /**
      * Sets the value of the 'sessionEndDt' field.
      * from ubisession sessionEndDt
      * @param value The value of 'sessionEndDt'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setSessionEndDt(java.lang.Long value) {
      validate(fields()[6], value);
      this.sessionEndDt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionEndDt' field has been set.
      * from ubisession sessionEndDt
      * @return True if the 'sessionEndDt' field has been set, false otherwise.
      */
    public boolean hasSessionEndDt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sessionEndDt' field.
      * from ubisession sessionEndDt
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearSessionEndDt() {
      sessionEndDt = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'absStartTimestamp' field.
      * from ubisession absStartTimestamp
      * @return The value.
      */
    public java.lang.Long getAbsStartTimestamp() {
      return absStartTimestamp;
    }

    /**
      * Sets the value of the 'absStartTimestamp' field.
      * from ubisession absStartTimestamp
      * @param value The value of 'absStartTimestamp'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setAbsStartTimestamp(java.lang.Long value) {
      validate(fields()[7], value);
      this.absStartTimestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'absStartTimestamp' field has been set.
      * from ubisession absStartTimestamp
      * @return True if the 'absStartTimestamp' field has been set, false otherwise.
      */
    public boolean hasAbsStartTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'absStartTimestamp' field.
      * from ubisession absStartTimestamp
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearAbsStartTimestamp() {
      absStartTimestamp = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'absEndTimestamp' field.
      * from ubisession absEndTimestamp
      * @return The value.
      */
    public java.lang.Long getAbsEndTimestamp() {
      return absEndTimestamp;
    }

    /**
      * Sets the value of the 'absEndTimestamp' field.
      * from ubisession absEndTimestamp
      * @param value The value of 'absEndTimestamp'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setAbsEndTimestamp(java.lang.Long value) {
      validate(fields()[8], value);
      this.absEndTimestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'absEndTimestamp' field has been set.
      * from ubisession absEndTimestamp
      * @return True if the 'absEndTimestamp' field has been set, false otherwise.
      */
    public boolean hasAbsEndTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'absEndTimestamp' field.
      * from ubisession absEndTimestamp
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearAbsEndTimestamp() {
      absEndTimestamp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'botFlagList' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getBotFlagList() {
      return botFlagList;
    }

    /**
      * Sets the value of the 'botFlagList' field.
      * @param value The value of 'botFlagList'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setBotFlagList(java.util.List<java.lang.Integer> value) {
      validate(fields()[9], value);
      this.botFlagList = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'botFlagList' field has been set.
      * @return True if the 'botFlagList' field has been set, false otherwise.
      */
    public boolean hasBotFlagList() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'botFlagList' field.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearBotFlagList() {
      botFlagList = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isOpen' field.
      * to identify open or end
      * @return The value.
      */
    public java.lang.Boolean getIsOpen() {
      return isOpen;
    }

    /**
      * Sets the value of the 'isOpen' field.
      * to identify open or end
      * @param value The value of 'isOpen'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setIsOpen(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.isOpen = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isOpen' field has been set.
      * to identify open or end
      * @return True if the 'isOpen' field has been set, false otherwise.
      */
    public boolean hasIsOpen() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isOpen' field.
      * to identify open or end
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearIsOpen() {
      isOpen = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'metrics' field.
      * Session metrics data map
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetrics() {
      return metrics;
    }

    /**
      * Sets the value of the 'metrics' field.
      * Session metrics data map
      * @param value The value of 'metrics'.
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder setMetrics(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[11], value);
      this.metrics = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'metrics' field has been set.
      * Session metrics data map
      * @return True if the 'metrics' field has been set, false otherwise.
      */
    public boolean hasMetrics() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'metrics' field.
      * Session metrics data map
      * @return This builder.
      */
    public com.ebay.sojourner.common.model.SessionMetrics.Builder clearMetrics() {
      metrics = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SessionMetrics build() {
      try {
        SessionMetrics record = new SessionMetrics();
        if (rheosHeaderBuilder != null) {
          record.rheosHeader = this.rheosHeaderBuilder.build();
        } else {
          record.rheosHeader = fieldSetFlags()[0] ? this.rheosHeader : (com.ebay.sojourner.common.model.RheosHeader) defaultValue(fields()[0]);
        }
        record.guid = fieldSetFlags()[1] ? this.guid : (java.lang.String) defaultValue(fields()[1]);
        record.sessionSkey = fieldSetFlags()[2] ? this.sessionSkey : (java.lang.Long) defaultValue(fields()[2]);
        record.sessionId = fieldSetFlags()[3] ? this.sessionId : (java.lang.String) defaultValue(fields()[3]);
        record.sojDataDt = fieldSetFlags()[4] ? this.sojDataDt : (java.lang.Long) defaultValue(fields()[4]);
        record.sessionStartDt = fieldSetFlags()[5] ? this.sessionStartDt : (java.lang.Long) defaultValue(fields()[5]);
        record.sessionEndDt = fieldSetFlags()[6] ? this.sessionEndDt : (java.lang.Long) defaultValue(fields()[6]);
        record.absStartTimestamp = fieldSetFlags()[7] ? this.absStartTimestamp : (java.lang.Long) defaultValue(fields()[7]);
        record.absEndTimestamp = fieldSetFlags()[8] ? this.absEndTimestamp : (java.lang.Long) defaultValue(fields()[8]);
        record.botFlagList = fieldSetFlags()[9] ? this.botFlagList : (java.util.List<java.lang.Integer>) defaultValue(fields()[9]);
        record.isOpen = fieldSetFlags()[10] ? this.isOpen : (java.lang.Boolean) defaultValue(fields()[10]);
        record.metrics = fieldSetFlags()[11] ? this.metrics : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SessionMetrics>
    WRITER$ = (org.apache.avro.io.DatumWriter<SessionMetrics>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SessionMetrics>
    READER$ = (org.apache.avro.io.DatumReader<SessionMetrics>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
